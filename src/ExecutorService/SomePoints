1. Internally ExecutorService is using LinkedBlockingQueue

2. For executorService.shutdown()
By manually doing shutdown it will terminate all the threads in the threadPool. otherwise the threads keep on running.
If you didnt keep below line the threads keep on running

3. Difference between Fixed Thread Pool and Cached Thread Pool ?
FixedThreadPool vs CachedThreadPool

FixedThreadPool ðŸ”’

Threads: Fixed number (set by you).

Use case: Steady workload (e.g., processing consistent tasks).

Creates the fixed number of threads and use those fixed threads  even though heavy or low
workload

Behavior: Queues tasks if busy.

CachedThreadPool ðŸš€

Threads: Grows/shrinks automatically.

Use case: Many short tasks (e.g., handling spikes in requests).

Behavior: Creates new threads if busy, kills idle ones after 60s.

Creates the threads based on demand but if existing threads are free it will reuse the same
thread again and shrinks and if demand increases again creates threads and use those

TL;DR: Use Fixed for stability, Cached for flexibility


4.

FixedThreadPool: Use when you need a stable number of threads and want to limit resource usage.
CachedThreadPool: Use when you have a large number of short-lived tasks and need a flexible number of threads.

5. Difference between Submit and Execute
Execute method will take only Runnable interface
while Submit method will take both Runnable and Callable Interface

  // Works almost like Fixed Thread Pool but with some diff
    ExecutorService executorService = Executors.newScheduledThreadPool(3);
    PolicyReminderTask class may be implementing Runnable or Callable Interface
    for (Customer customer : customers) {
        PolicyReminderTask task = new PolicyReminderTask(customer);
        executorService.submit(task);
    }

    PolicyReminderTask class must implement only Runnable Interface
   for (Customer customer : customers) {
        PolicyReminderTask task = new PolicyReminderTask(customer);
        executorService.execute(task);
   }

6.